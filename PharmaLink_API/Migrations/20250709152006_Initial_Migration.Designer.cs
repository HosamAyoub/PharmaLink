// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmaLink_API.Data;

#nullable disable

namespace PharmaLink_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250709152006_Initial_Migration")]
    partial class Initial_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PharmaLink_API.Models.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Drug", b =>
                {
                    b.Property<int>("DrugID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugID"));

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraindications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosageAndAdministration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosageFormsAndStrengths")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugInteractions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndicationsAndUsage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageAndHandling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UNII")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarningsAndCautions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrugID");

                    b.HasIndex("UNII")
                        .IsUnique();

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("PharmaLink_API.Models.DrugAlternative", b =>
                {
                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("AlternativeDrugId")
                        .HasColumnType("int");

                    b.HasKey("DrugId", "AlternativeDrugId");

                    b.HasIndex("AlternativeDrugId");

                    b.ToTable("DrugAlternatives");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PharmaLink_API.Models.OrderDrug", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "DrugId");

                    b.HasIndex("DrugId");

                    b.ToTable("OrderDrugs");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyID"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndHour")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<TimeOnly>("StartHour")
                        .HasColumnType("time");

                    b.HasKey("PharmacyID");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("PharmaLink_API.Models.PharmacyDrug", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.HasKey("PharmacyId", "DrugId");

                    b.HasIndex("DrugId");

                    b.ToTable("PharmacyDrugs");
                });

            modelBuilder.Entity("PharmaLink_API.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDisease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDrugs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("MobileNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PharmaLink_API.Models.UserCart", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DrugId");

                    b.HasIndex("DrugId");

                    b.ToTable("UserCarts");
                });

            modelBuilder.Entity("PharmaLink_API.Models.UserFavoriteDrug", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DrugId");

                    b.HasIndex("DrugId");

                    b.ToTable("UserFavoriteDrugs");
                });

            modelBuilder.Entity("PharmaLink_API.Models.DrugAlternative", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Drug", "AlternativeDrug")
                        .WithMany()
                        .HasForeignKey("AlternativeDrugId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PharmaLink_API.Models.Drug", "Drug")
                        .WithMany("Alternatives")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlternativeDrug");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Order", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Pharmacy", "Pharmacy")
                        .WithMany("Orders")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PharmaLink_API.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmaLink_API.Models.OrderDrug", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Drug", "Drug")
                        .WithMany("OrderDrugs")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaLink_API.Models.Order", "Order")
                        .WithMany("OrderDrugs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Pharmacy", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Account", "Account")
                        .WithOne("Pharmacy")
                        .HasForeignKey("PharmaLink_API.Models.Pharmacy", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PharmaLink_API.Models.PharmacyDrug", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Drug", "Drug")
                        .WithMany("PharmacyDrugs")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaLink_API.Models.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyDrugs")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("PharmaLink_API.Models.User", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("PharmaLink_API.Models.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PharmaLink_API.Models.UserCart", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Drug", "Drug")
                        .WithMany("UserCarts")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaLink_API.Models.User", "User")
                        .WithMany("UserCarts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmaLink_API.Models.UserFavoriteDrug", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Drug", "Drug")
                        .WithMany("UserFavorites")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaLink_API.Models.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Account", b =>
                {
                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Drug", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("OrderDrugs");

                    b.Navigation("PharmacyDrugs");

                    b.Navigation("UserCarts");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Order", b =>
                {
                    b.Navigation("OrderDrugs");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Pharmacy", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PharmacyDrugs");
                });

            modelBuilder.Entity("PharmaLink_API.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserCarts");

                    b.Navigation("UserFavorites");
                });
#pragma warning restore 612, 618
        }
    }
}
