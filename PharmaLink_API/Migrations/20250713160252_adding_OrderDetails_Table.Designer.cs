// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmaLink_API.Data;

#nullable disable

namespace PharmaLink_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250713160252_adding_OrderDetails_Table")]
    partial class adding_OrderDetails_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PharmaLink_API.Models.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = 1,
                            Email = "user1@example.com",
                            Password = "hashedpass",
                            Role = "User"
                        },
                        new
                        {
                            AccountID = 2,
                            Email = "pharmacy@example.com",
                            Password = "hashedpass",
                            Role = "Pharmacy"
                        });
                });

            modelBuilder.Entity("PharmaLink_API.Models.CartItem", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DrugId", "PharmacyId");

                    b.HasIndex("DrugId", "PharmacyId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DrugId = 1,
                            PharmacyId = 1,
                            Price = 0m,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("PharmaLink_API.Models.Drug", b =>
                {
                    b.Property<int>("DrugID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugID"));

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adverse_reactions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AlternativesGpID")
                        .HasColumnType("int");

                    b.Property<string>("Alternatives_names")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraindications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage_and_administration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage_forms_and_strengths")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drug_UrlImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drug_interactions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indications_and_usage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Storage_and_handling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Warnings_and_cautions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrugID");

                    b.ToTable("Drugs");

                    b.HasData(
                        new
                        {
                            DrugID = 1,
                            ActiveIngredient = "Paracetamol",
                            Adverse_reactions = "Nausea",
                            AlternativesGpID = 100,
                            Alternatives_names = "Tylenol",
                            Category = "Painkiller",
                            CommonName = "Panadol",
                            Contraindications = "Liver disease",
                            Description = "Pain reliever",
                            Dosage_and_administration = "500mg twice daily",
                            Dosage_forms_and_strengths = "Tablet 500mg",
                            Drug_UrlImg = "/images/panadol.png",
                            Drug_interactions = "Warfarin",
                            Indications_and_usage = "Headache, fever",
                            Storage_and_handling = "Keep cool and dry",
                            Warnings_and_cautions = "Don't exceed 4g/day"
                        });
                });

            modelBuilder.Entity("PharmaLink_API.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PharmaLink_API.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("DrugId", "PharmacyId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyID"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndHour")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<TimeOnly>("StartHour")
                        .HasColumnType("time");

                    b.HasKey("PharmacyID");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Pharmacies");

                    b.HasData(
                        new
                        {
                            PharmacyID = 1,
                            AccountId = 2,
                            Address = "Nasr City",
                            Country = "Egypt",
                            EndHour = new TimeOnly(0, 0, 0),
                            Name = "Good Health",
                            Rate = 0.0,
                            StartHour = new TimeOnly(0, 0, 0)
                        });
                });

            modelBuilder.Entity("PharmaLink_API.Models.PharmacyStock", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.HasKey("PharmacyId", "DrugId");

                    b.HasIndex("DrugId");

                    b.ToTable("PharmacyStocks");

                    b.HasData(
                        new
                        {
                            PharmacyId = 1,
                            DrugId = 1,
                            Price = 15.00m,
                            QuantityAvailable = 50
                        });
                });

            modelBuilder.Entity("PharmaLink_API.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDisease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDrugs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("MobileNumber")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            AccountId = 1,
                            Address = "Cairo",
                            Country = "Egypt",
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Female",
                            MobileNumber = "0100000000",
                            Name = "Mariem",
                            UserDisease = "None",
                            UserDrugs = "Paracetamol"
                        });
                });

            modelBuilder.Entity("PharmaLink_API.Models.UserFavoriteDrug", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DrugId");

                    b.HasIndex("DrugId");

                    b.ToTable("UserFavoriteDrugs");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DrugId = 1
                        });
                });

            modelBuilder.Entity("PharmaLink_API.Models.CartItem", b =>
                {
                    b.HasOne("PharmaLink_API.Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PharmaLink_API.Models.PharmacyStock", "PharmacyStocks")
                        .WithMany("CartItems")
                        .HasForeignKey("DrugId", "PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PharmacyStocks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Order", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Pharmacy", "Pharmacy")
                        .WithMany("Orders")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PharmaLink_API.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmaLink_API.Models.OrderDetail", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaLink_API.Models.PharmacyStock", "PharmacyStock")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DrugId", "PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PharmacyStock");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Pharmacy", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Account", "Account")
                        .WithOne("Pharmacy")
                        .HasForeignKey("PharmaLink_API.Models.Pharmacy", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PharmaLink_API.Models.PharmacyStock", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Drug", "Drug")
                        .WithMany("PharmacyStocks")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaLink_API.Models.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyStocks")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("PharmaLink_API.Models.User", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("PharmaLink_API.Models.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PharmaLink_API.Models.UserFavoriteDrug", b =>
                {
                    b.HasOne("PharmaLink_API.Models.Drug", "Drug")
                        .WithMany("UserFavorites")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaLink_API.Models.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Account", b =>
                {
                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Drug", b =>
                {
                    b.Navigation("PharmacyStocks");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PharmaLink_API.Models.Pharmacy", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PharmacyStocks");
                });

            modelBuilder.Entity("PharmaLink_API.Models.PharmacyStock", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PharmaLink_API.Models.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");

                    b.Navigation("UserFavorites");
                });
#pragma warning restore 612, 618
        }
    }
}
